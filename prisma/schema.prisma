// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  OTHER
}

// Customer Model
model Customer {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  name       String      @db.VarChar(100)
  address    String
  // TODO: geolocation 
  latitude   String
  longitude  String
  phoneno    String?     @db.VarChar(20)
  deliveries Delivery[]
  Inventory  Inventory[]
  Archive    Archive[]
  Pickup     Pickup[]
}

model Admin {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  name       String   @db.VarChar(100)
  email      String   @db.VarChar(100)
  password   String   @db.VarChar(100)
  superAdmin Boolean  @default(false) @map("super_admin")
}

model Product {
  SKU       String      @id @db.VarChar(50)
  name      String      @db.VarChar(100)
  desc      String?
  density   Float       @db.Float
  Inventory Inventory[]
  Archive   Archive[]
}

model Rider {
  id             String      @id @db.VarChar(50)
  name           String      @db.VarChar(100)
  // TOOD: geolocation ??? 
  phoneno        String?     @db.VarChar(20)
  onduty         Boolean
  email          String      @unique @db.VarChar(50)
  password       String      @db.VarChar(80)
  drivingLicense String?     @map("driving_license")
  bloodGroup     BloodGroup? @map("blood_group")
  otp            String?     @db.VarChar(10)
  otpExpireTime  DateTime?   @map("otp_expire_time")
  deliveries     Delivery[]
  Pickup         Pickup[]
}

model Inventory {
  id         String     @id @db.VarChar(50)
  customer   Customer   @relation(fields: [customerId], references: [id])
  customerId Int        @map("customer_id")
  product    Product    @relation(fields: [productId], references: [SKU])
  productId  String     @map("product_id") @db.VarChar(50)
  AWB        String     @db.VarChar(50)
  shipped    Boolean
  Delivery   Delivery[]
  Pickup     Pickup[]
}

model Delivery {
  id         String    @id @db.VarChar(20) // TODO: think about this
  rider      Rider     @relation(fields: [riderId], references: [id])
  riderId    String    @map("rider_id") @db.VarChar(50)
  customer   Customer  @relation(fields: [customerId], references: [id])
  customerId Int       @map("customer_id")
  item       Inventory @relation(fields: [itemId], references: [id])
  itemId     String    @map("item_id") @db.VarChar(50)
  Archive    Archive[]
}

model Archive {
  id         String   @id @db.VarChar(50)
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @map("customer_id")
  product    Product  @relation(fields: [productId], references: [SKU])
  productId  String   @map("product_id") @db.VarChar(50)
  AWB        String   @db.VarChar(50)
  delivery   Delivery @relation(fields: [deliveryId], references: [id])
  deliveryId String   @map("delivery_id") @db.VarChar(20)
}

model Pickup {
  id         String    @id @db.VarChar(20) // TODO: think about this
  rider      Rider     @relation(fields: [riderId], references: [id])
  riderId    String    @map("rider_id") @db.VarChar(50)
  customer   Customer  @relation(fields: [customerId], references: [id])
  customerId Int       @map("customer_id")
  item       Inventory @relation(fields: [itemId], references: [id])
  itemId     String    @map("item_id") @db.VarChar(50)
}
